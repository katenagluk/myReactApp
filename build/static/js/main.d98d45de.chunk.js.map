{"version":3,"sources":["components/appHeader/AppHeader.js","components/spinner/Spinner.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/ErrorBoundary/ErrorBoundary.js","resources/img/vision.png","components/app/App.js","index.js"],"names":["AppHeader","_jsxs","className","children","_jsx","href","Spinner","xmlns","style","margin","background","display","width","height","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","ErrorMessage","objectFit","src","img","alt","MarvelService","_this","_classCallCheck","_apiBase","_apiKey","_ts","_hash","_baseOffset","getResource","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","res","wrap","_context","prev","next","fetch","sent","ok","Error","concat","status","json","abrupt","stop","_x","apply","arguments","getAllCharacters","_callee2","offset","_args2","_context2","length","undefined","data","results","map","_transformCharacter","getCharacter","_ref3","_callee3","id","_context3","_x2","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","RandomChar","_Component","_inherits","_super","_createSuper","_len","args","Array","_key","call","state","loading","error","marvelService","onChatLoaded","setState","onCharLoading","onError","updateChar","Math","floor","random","then","catch","_createClass","key","value","this","clearInterval","timerId","_this$state","errorMessage","spinner","content","View","onClick","mjolnir","Component","imgStyle","CharList","charList","newItemLoading","charEnded","onRequest","onCharListLoading","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","setRef","ref","push","focusOnItem","forEach","item","classList","remove","add","focus","arr","_this2","i","tabIndex","props","onCharSelected","onKeyDown","e","_this3","renderItems","disabled","Skeleton","_Fragment","CharInfo","charId","onCharLoaded","prevProps","skeleton","console","log","ErrorBoundary","errorInfo","App","selectedChar","decoration","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d98d45de.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","const Spinner = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{margin: '0 auto', background: 'none', display: 'block'}} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n            <g transform=\"translate(80,50)\">\n            <g transform=\"rotate(0)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\n            <g transform=\"rotate(45)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(50,80)\">\n            <g transform=\"rotate(90)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\n            <g transform=\"rotate(135)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(20,50.00000000000001)\">\n            <g transform=\"rotate(180)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\n            <g transform=\"rotate(225)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(49.99999999999999,20)\">\n            <g transform=\"rotate(270)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\n            <g transform=\"rotate(315)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\n            </circle>\n            </g>\n            </g>\n        </svg>\n    )\n}\n\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n// как обратиться к статичному файлу папки public\r\n// пример как прописывать путь process.env.PUBLIC_URL + '/error.gif'\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","class MarvelService {\r\n    // переменные начинаются с лодыша _ потому что они очень важные и их нельзя менять\r\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    _apiKey = 'apikey=2b11bbd9fa12c6f54b5b15c4efe3b318';\r\n    _ts = 'ts=1';\r\n    _hash = 'hash=264aaa305532cd751dc758afaa69080d';\r\n    _baseOffset = 210;\r\n\r\n    getResource = async (url) => {\r\n        let res = await fetch(url);\r\n\r\n        if(!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status ${res.status}`);\r\n        }\r\n\r\n        return await res.json();\r\n    }\r\n    // тут можно оптимизировать строку. вывести части строки в отдельные переменные\r\n    // берем ссылку с сайта Марвел. вставляем в ковычках обязательно\r\n    getAllCharacters = async (offset = this._baseOffset) => {\r\n        const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}&${this._ts}&${this._hash}`);\r\n        return res.data.results.map(this._transformCharacter);\r\n    }\r\n    // а тут бэктики и вставляем через интерполяцию id\r\n    // async и await работают только в паре\r\n    getCharacter = async (id) => {\r\n        const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}&${this._ts}&${this._hash}`);\r\n        return this._transformCharacter(res.data.results[0]);\r\n    }\r\n    // очень важная функция которая начинается с лодыша _\r\n    _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? ((char.description.length >= 100) ? `${char.description.slice(0, 100)}...` : char.description) : 'No information yet',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n}\r\n\r\nexport default MarvelService;\r\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { Component } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\n// у нас происходило 2 запроса на сервер. мы отправляли запрос в конструкторе (constructor) тогда, когда запрос еще не был нами создан\n// был неправильно расположен вызов нашей сетевой функции\nclass RandomChar extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.updateChar();\n    // }\n\n    state = {\n        char: {},\n        // загрузка объекта (спиннер)\n        loading: true,\n        error: false\n    }\n\n    marvelService = new MarvelService();\n    // монтирование компонента. \"Правильное\" место для создания компонента\n    componentDidMount() {\n        this.updateChar();\n        // this.timerId = setInterval(this.updateChar, 15000);\n    }\n    // удаление компонента\n    componentWillUnmount() {\n        clearInterval(this.timerId);\n    }\n\n    // ставить loading в позицию false когда данные загрузились\n    onChatLoaded = (char) => {\n        this.setState({\n            char,\n            loading: false})\n    }\n    // включить спиннер\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n    // отображение ошибки\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n    // catch ловит ошибку\n    // перед тем как сделать запрос в onCharLoading спиннер ставим в позицию true\n    updateChar = () => {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        this.onCharLoading();\n        this.marvelService\n            .getCharacter(id)\n            .then(this.onChatLoaded)\n            .catch(this.onError)\n    }\n    // берем данные name, description... с сайте марвел в Response Body\n    render() {\n        const {char, loading, error} = this.state;\n        // прописываем три возможных состояния загрузки\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char}/> : null;\n        // мы вытащили сюда кусок нашей верстки чтобы осуществлять динамических рендеринг\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\" onClick={this.updateChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <div className=\"randomchar__block\">\n        <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","// УРОК 151 ПРИМЕР ДИНАМИЧЕСКОГО ПОЛУЧЕНИЯ ДАННЫХ ИЗ СЕРВЕРА ДЛЯ НЕСКОЛЬКИХ КАРТОЧЕК\n\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\n// превращаем CharList в компонент и импортируем его\nclass CharList extends Component {\n    // создаем объект state\n    // создаем пустой массив для заполнения в будущем данными из сервера Марвел\n    // newItemLoading - подгрузка новых персонажей\n    // offset - 210 - начальное значение отступа\n    state = {\n        charList: [],\n        loading: true,\n        error: false,\n        newItemLoading: false,\n        offset: 210,\n        charEnded: false\n    }\n    // в MarvelService создается запрос на сервер\n    marvelService = new MarvelService();\n    // создаем промис. запрос на сервер + загрузка + ошибка\n    componentDidMount() {\n        this.onRequest();\n        // this.marvelService.getAllCharacters()\n        //     .then(this.onCharListLoaded)\n        //     .catch(this.onError)\n    }\n    // УРОК 154. Добавление персонажей при клике на кнопку\n    // порядок действий: у нас есть метод onRequest, который отвечает за запрос на сервер. Мы его вызываем первый раз когда наш компонент отрендерился. И он ориентируется на наш baseOffset (отступ). сначала используем базовый отступ а потом будет другое число. Далее запускается onCharListLoaded -  получает в себя новые данные и формируем новое состояние. charList изначально будет пустым массивом. Далее разворачиваются новые массивы с учетом предыдущего.\n    // метод onCharListLoading переключает подгрузку персонажей только при клике на кнопку. Мы меняем переменную newItemLoading в позицию true. \n\n    // тут мы оптимизируем код, который выше, потому что там действия эквивалентны\n    onRequest = (offset) => {\n        this.onCharListLoading();\n        this.marvelService.getAllCharacters(offset)\n            .then(this.onCharListLoaded)\n            .catch(this.onError)\n    }\n    // запуск и загрузка новых персонажей\n    onCharListLoading = () => {\n        this.setState({\n            newItemLoading: true\n        })\n    }\n    // в случае долгой загрузки\n    // возвращаем объект из функции\n    // проверяет закончились ли персонажи при подгрузке страницы\n    onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        this.setState(({offset, charList}) => ({\n            charList: [...charList, ...newCharList],\n            loading: false,\n            newItemLoading: false,\n            offset: offset + 9,\n            charEnded: ended\n        }))\n    }\n    // в случае ошибки\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n    // УРОК 159 РЕФЫ\n    itemRefs = [];\n    setRef = (ref) => {\n        this.itemRefs.push(ref);\n    }\n    // переключение класса для выбранного персонажа (подсветка)\n    focusOnItem = (id) => {\n        this.itemRefs.forEach(item => item.classList.remove('char__item_selected'));\n        this.itemRefs[id].classList.add('char__item_selected');\n        this.itemRefs[id].focus();\n    }\n\n    // формируем верстку с помощью map, чтобы не писать кучу однотипной верстки. у нас на сайте 9 одинаковых блоков с картинками и подписями + одна кнопка снизу. также мы используем из сервера альтернативный текст и из условия инлайн стиль imgStyle\n\n    // динамически меняем свойство object fit для загружаемой картинки. в зависимости того там стоит картинка-заглушка по умолчанию, либо обычная картинка\n    renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            return (\n                <li\n                    className=\"char__item\"\n                    // REF\n                    tabIndex={0}\n                    ref={this.setRef}\n                    key={item.id}\n                    // событие клика\n                    onClick={() => {\n                        this.props.onCharSelected(item.id);\n                        this.focusOnItem(i);\n                    }}\n                    // для работы с сайтом с клавиатуры\n                    onKeyDown={(e) => {\n                        if (e.key === '' || e.key === \"Enter\") {\n                            this.props.onCharSelected(item.id);\n                            this.focusOnItem(i);\n                    }\n                }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // центрирование спиннера или ошибки с помощью класса char__grid\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n    // рендер на страницу\n    // сюда передаем наш массив с данными: айди, картинка, альтернативный текст и имя героя (выше в теге <li/>)\n    // вставляем в верстку переменные. через тернарный оператор проверяем true или false наши loading и error. Если true, то используем данные из файлов js - <Spinner/> и <ErrorMessage/>\n    // добавляем функцию renderItems\n    render () {\n        const {charList, loading, error, offset, newItemLoading, charEnded} = this.state;\n        const items = this.renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display' : charEnded ? 'none' : 'block'}}\n                onClick={() => this.onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n// Проверка через PropTypes функция ли onCharSelected\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nclass CharInfo extends Component {\n    // loading - false потому что изначально данные загружаться не будут с сайте Марвел, только при нажатии на кнопку\n    state = {\n        char: null,\n        loading: false,\n        error: false\n    }\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.updateChar();\n    }\n    // взаимодействие с предыдущими результатами. предыдущие пропсы и текущие пропсы. нужно чтобы избежать зацикливания. изменились ли действительно пропсы или вызвался рендер\n    // prevState тоже можно сравнивать но пока достаточно только пропсов\n    componentDidUpdate(prevProps) {\n        if (this.props.charId !== prevProps.charId) {\n            this.updateChar();\n        }\n    }\n\n    updateChar = () => {\n        const {charId} = this.props;\n        if(!charId) {\n            return;\n        }\n\n        // сначала ставим спиннер, получаем данные или ловим ошибку\n        this.onCharLoading();\n        this.marvelService\n            .getCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError);\n    }\n\n    onCharLoaded = (char) => {\n        this.setState({\n            char, \n            loading: false\n        })\n    }\n\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n\n    render () {\n        const {char, loading, error} = this.state;\n\n        // заглушка по умолчанию <Skeleton/>. когда у нас НЕ загрузка, НЕ ошибка\n        const skeleton = char || loading || error ? null : <Skeleton/>\n        console.log(skeleton)\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        // НЕ загрузка, НЕ ошибка и НЕ скелетон\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    }\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    // как обычно проверка нашей картинки и изменение свойства object fit\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return(\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n            {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // ниже надпись чтобы игнорировать eslint. он нас предупреждает что условие ниже может пагубно влиять на массив, так как мы его пытаемся поменять, а не создать новый\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i}\n                            className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n// УРОК 155. Используя propTypes, \n// можем проверять значения на массивы, объекты, числа, строки и тд\n// Ниже проверяем айди персонажа число ли это. Если нет, то будет ошибка в консоли\n// с помощью propTypes можно устанавливать пропсы по умолчанию - default props\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","// УРОК 153 ПРЕДОХРАНИТЕЛИ\r\n// Мы используем предохранитель для CharList, RandomChar, CharInfo\r\n// Для разных блоков лучше использовать разные предохранители\r\n// Предохранители используются для блоков кода, которые потенциально могут сломаться в Реакте.\r\n\r\nimport { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Component } from \"react\";\nimport AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nclass App extends Component {\n    // ПРИМЕР ПОДЪЕМА СОСТОЯНИЯ\n    state = {\n        selectedChar: null\n    }\n\n    onCharSelected = (id) => {\n        this.setState({\n            selectedChar: id\n        })\n    }\n    // УРОК 152 поднятие состояния нужно чтобы некоторые компоненты общались друг с другом. пример CharList, ChaeInfo с App.js\n    render () {\n        return (\n            <div className=\"app\">\n                <AppHeader/>\n                <main>\n                    <ErrorBoundary>\n                        <RandomChar/>\n                    </ErrorBoundary>\n                    <div className=\"char__content\">\n                        <ErrorBoundary>\n                            <CharList onCharSelected={this.onCharSelected}/>\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <CharInfo charId={this.state.selectedChar}/>\n                        </ErrorBoundary>\n                    </div>\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nimport './style/style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}